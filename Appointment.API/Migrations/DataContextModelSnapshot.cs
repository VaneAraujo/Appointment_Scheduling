// <auto-generated />
using System;
using Appointment.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Appointment.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Appointment.Shared.Entities.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"));

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("role_id");

                    b.HasIndex("role_id")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Appointment.Shared.Entities.Scheduling", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_id"));

                    b.Property<DateTime>("appointment_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("appointment_end_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("appointment_start_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("patient_id")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("doctor_id");

                    b.HasIndex("order_id")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Appointment.Shared.Entities.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("bussiness_end_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bussiness_start_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("user_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("Rolesrole_id")
                        .HasColumnType("int");

                    b.Property<int>("Usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("Rolesrole_id", "Usersuser_id");

                    b.HasIndex("Usersuser_id");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Appointment.Shared.Entities.Scheduling", b =>
                {
                    b.HasOne("Appointment.Shared.Entities.User", null)
                        .WithMany("schedules")
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Appointment.Shared.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("Rolesrole_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Usersuser_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Appointment.Shared.Entities.User", b =>
                {
                    b.Navigation("schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
